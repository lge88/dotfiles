#!/usr/bin/env node
var prog = require('commander');
var path = require('path');
require('shelljs/global');

prog
  .version('0.0.1')
  .option('-d, --development', 'Generate default development configuration file')
  .option('-p, --production', 'Generate default production configuration file')
  .option('-o, --output', 'Output file name', 'configure.js')
  // TODO:
  // .option('-i, --interactive', 'Generate configuration file interactively')
  .usage('[options]');

prog.parse(process.argv);
var args = prog.args;

var fileName = 'configure.js'
if (prog.development) {
  fileName = 'configure-dev.js';
}

if (prog.production) {
  fileName = 'configure-prod.js';
}

if (prog.output) {
  fileName = prog.output;
}

var filePath = path.resolve(__dirname, '..', fileName);

if (test('-e', filePath)) {
  prog.prompt('The ' + path.basename(filePath) + ' file exists, override? [yes/no] ', function(ans) {
    if (ans === 'yes') {
      doit();
      process.exit();
    } else {
      console.log('Abort.');
      process.exit();
    }
  });
} else {
  doit();
  process.exit();
}

function doit() {
  cd(path.resolve(__dirname, '..'));
  
  var conf = {
    "mongodb": "mongodb://localhost/ifea"
  };

  conf["apps"] = getAppList("lib/*");
  
  if (prog.development) {
    conf["port"] = 8005;
  }

  if (prog.production) {
    conf["port"] = 8000;
  }
    
  ("module.exports = exports = " + JSON.stringify(conf, null, 2) + ";").to(filePath);

  process.exit();
}


function getAppList(apps) {
  if (Array.isArray(apps)) {
    return apps;
  } else if (typeof apps === 'string') {
    return ls(apps)
      .filter(function(it) {
        if (test('-e', path.join(it, 'component.json'))) {
          try {
            var conf = JSON.parse(cat(path.join(it, 'component.json')));
          } catch(e) {
            console.log("Exception on parsing " + it, e);
            process.exit();
          }
        } else {
          return false;
        }

        if (conf) {
          if (typeof conf === 'object') {
            return conf['express_server'];
          }
        }

        return false;
      })
      .map(function(it) {
        return path.basename(it);
      });
  }
}
