#! /usr/bin/env node

require( 'shelljs/global' );
var path = require('path');
var rl = require( 'readline' ).createInterface( {
  input: process.stdin,
  output: process.stdout
} );

var tmplName = process.argv[2];
var dest = process.argv[3] || now().join( '-' );

if ( !tmplName ) {
  echo( 'Usage: tmpl templateName [destinationPath]' );
  echo( 'Available templates:' );
  printAvailableTemplates();
  exit( 1 );
}

try {
  var src = findTemplate( tmplName );
} catch( err ) {
  console.log( err );
  exit();
}

var savedDir = pwd();

var context = {
  cwd: pwd(),
  src: src,
  dest: path.resolve( dest ),
  filesCopied: false,
  filter: null,
  ignore: [
      /^\.git$/, /^components$/, /^node_modules$/, /backup/,
      /\.bak$/, /autosaves/, /elpa/, /legacy/, /~$/, /^\.#/
  ],
  preStack: [],
  postStack: [],
  copyList: []
};

if ( test( '-e', dest ) ) {
  rl.question( dest + ' is already there, Override? [y/N]', function( ans ) {
    echo( 'ans:' + ans );
    if ( ans === 'y' ) {
      echo( 'OK, doit' );
      run( context );
    } else {
      echo( 'Abort.' );
      exit();
    }
  } );
} else {
  run( context );
}

function loadInitScripts( context ) {
  var src = context.src, pre = context.preStack, post = context.postStack;
  var dirs = [ '_tmpl_', '_init' ];

  dirs
    .map( function( dir ) {
      return path.resolve( src, dir );
    } )
    .filter( function( dir ) {
      return test( '-d', dir );
    })
    .forEach( function( dir ) {
      echo( 'load scripts under ' + dir +' folder' );

      ls( dir ).forEach( function( f ) {
        try {
          var task = require( path.resolve( dir, f ) );
        } catch( err ) {
          console.log( err );
        }

        if ( typeof task.execute === 'function' ||
             typeof task.run === 'function' ) {
          task.run = task.execute || task.run;
          task.order || ( task.order = 1 );
          if ( task.order < 0 ) {
            pre.push( task );
          } else {
            post.push( task );
          }
        }
      } );
    } );

  function byOrder( a, b ) { return a.order - b.order; };
  pre.sort( byOrder );
  post.sort( byOrder );

}

function walk( dir, filterFn, list ) {
  filterFn || ( filterFn = function() { return true; } );
  list || ( list = [] );
  ls( '-A', dir )
    .filter( filterFn )
    .map( function( f ) {
      return path.join( dir, f );
    } )
    .forEach( function( f ) {
      if ( test( '-d', f ) ) {
        walk( f, filterFn, list );
      } else {
        list.push( f );
      }
    } );
  return list;
}

function generateCopyList( context ) {
  var src = context.src, dest = context.dest;
  var filterFn;
  if ( typeof context.filter === 'function' ) {
    filterFn = context.filter;
  } else {
    var patternsToIgnore = context.ignore;
    filterFn = function( f ) {
      return !patternsToIgnore.some( function( p ) {
        return p.test( f );
      } );
    }
  }

  var files = walk( src, filterFn );

  context.copyList = files.map( function( file ) {
    var a = path.resolve( src, file );
    var relPath = path.relative( src, a );
    var b = path.resolve( dest, relPath );
    return [ a, b ];
  } );

}

function runPreInitTasks( context ) {
  var pre = context.preStack, cwd = context.cwd;
  pre
    .forEach( function( t ) {
      cd( cwd );
      t.run( context );
      cd( cwd );
    } );
}

function copyFiles( context ) {
  var copyList = context.copyList;
  var src = context.src, dest = context.dest;

  echo( 'Copy template files from ' + src );

  copyList.forEach( function( pair ) {
    var src = pair[0], dest = pair[1];
    var dir = path.dirname( dest );
    mkdir( '-p', dir );
    cp( src, dest );
  } );
  context.filesCopied = true;
  echo( 'Files are copied to ' + dest );
}

function runPostInitTasks( context ) {
  var post = context.postStack, dest = context.dest;
  post
    .forEach( function( t ) {
      cd( dest );
      t.run( context );
      cd( dest );
    } );
}

function run( context ) {
  loadInitScripts( context );
  runPreInitTasks( context );
  generateCopyList( context );
  copyFiles( context );
  runPostInitTasks( context );
  exit();
}

function doit() {
  echo( 'Copy template files from ' + src );
  mkdir( '-p', dest );
  cd( dest );
  cp( '-fr', src + '/*', './' );
  cp( '-fr', src + '/.gitignore', './' );
  echo( 'Files are copied to ' + dest );

  var savedDir = pwd();

  if ( test( '-d', '_init' ) ) {
    echo( 'Run scripts under ' + dest +'_init folder' );

    var tasks = [];
    cd( '_init' );
    ls( '.' ).forEach( function( f ) {
      try {
        var task = require( path.resolve( f ) );
      } catch( err ) {
        console.log( err );
      }

      if ( typeof task.execute === 'function' ) {
        task.order || ( task.order = 0 );
        tasks.push( task );
      }
    } );

    tasks
      .sort( function( a, b ) { return a.order - b.order; } )
      .forEach( function( t ) {
        cd( savedDir );
        t.execute();
        cd( savedDir );
      } );

    echo( 'Remove _init folder' );
    rm( '-r', './_init' );

    cd( savedDir );
  }

  echo( 'Done!' );
  exit();
}

function getTemplatePaths() {
  var home = process.env.HOME;
  var tmplPaths = process.env.TMPL_PATH || [
    home + '/.dotfiles/.templates',
    home + '/Develop/js/ise/templates'
  ].join( ':' );

  tmplPaths = tmplPaths.trim().split( ':' )
    .map( function( p ) { return path.resolve( p ); } )
    .filter( function( p ) {
      return test( '-d', p );
    } );
  return tmplPaths;
}

function findTemplate( name ) {
  var found = null, paths = getTemplatePaths();
  paths.some( function( p ) {
    return ls( p )
      .filter( function( d ) {
        return test( '-d', path.resolve( p, d )  );
      } )
      .filter( function( d ) {
        return !/(legacy|\.bak$)/.test( d );
      } )
      .some( function( file ) {
        if ( file === name ) {
          found = path.resolve( p, name );
          return true;
        } else {
          return false;
        }
      } );
  } );

  if ( !found ) {
    var p = path.resolve( name );
    if ( test( '-d', p ) ) {
      found = p;
    }
  }

  if ( !found ) {
    throw "Can't find template " + name + " in:\n " + paths.join( '\n' );
  }
  return found;
}

function printAvailableTemplates() {
  var paths = getTemplatePaths();
  paths
    .forEach( function( p ) {
      ls( p )
        .filter( function( d ) {
          return test( '-d', path.resolve( p, d )  );
        } )
        .filter( function( d ) {
          return !/(legacy|\.bak$)/.test( d );
        } )
        .forEach( function( folder ) {
          console.log( folder );
        } );
    } );
}

function now() {
  var d = new Date();
  var out = [
    1 + d.getMonth(),
    d.getDate(),
    d.getHours(),
    d.getMinutes(),
    d.getSeconds()
  ].map( function( num ) {
    return ( '0' + num ).slice( -2 );
  } );
  out.unshift( '' + d.getFullYear() );
  return out;
}
