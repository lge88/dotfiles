// # -*- mode: snippet -*-
// # name: function viewport()
// # key: funviewport
// # --
function viewport( domElement, options ) {

  var CAMERA_NEAR = options.CAMERA_NEAR || 1;
  var CAMERA_FAR = options.CAMERA_FAR || 10000;
  var signals = options.signals;

  var container, camera, scene, renderer;
  var controls, transformControls;
  var cameras, helpers, objects;
  var grid;

  var onMouseDownPosition = new THREE.Vector2();
  var onMouseUpPosition = new THREE.Vector2();

  var ray = new THREE.Raycaster();
  var projector = new THREE.Projector();

  init();
  animate();

  function init() {
    setupScene();
    buildScene();
    addSomeCamera();
  }

  function animate() {
    requestAnimationFrame( animate );
    render();
  }

  function render() {

    transformControls.update();
    // controls.update();

    renderer.render( scene, camera );
  }

  function setupScene() {
    container = document.getElementById( 'main' );

    cameras = [];
    helpers = [];
    objects = [];

    CAMERA_NEAR = 1;
    CAMERA_FAR = 10000;

    camera = new THREE.Camera();

    var cam = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, CAMERA_NEAR, CAMERA_FAR );
    cam.position.set( 0, 400, 800 );
    cam.lookAt( new THREE.Vector3() );
    cameras.push( cam );

    scene = new THREE.Scene();
    var light = new THREE.DirectionalLight( 0xffffff );
    light.position.set( 0, 0, 1 );
    scene.add( light );

    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setSize( window.innerWidth, window.innerHeight );
    container.appendChild( renderer.domElement );

    transformControls = new THREE.TransformControls( camera, renderer.domElement );
    scene.add( transformControls.gizmo );
    transformControls.hide();
    // transformControls.addEventListener( 'change', render );

    onMouseDownPosition = new THREE.Vector2();
    onMouseUpPosition = new THREE.Vector2();

    ray = new THREE.Raycaster();
    projector = new THREE.Projector();

    renderer.domElement.addEventListener( 'mousedown', onMouseDown );
    renderer.domElement.addEventListener( 'mouseup', onMouseUp );
    renderer.domElement.addEventListener( 'dblclick', onDoubleClick, false );

    controls = new THREE.EditorControls( camera, renderer.domElement );
    // controls = new THREE.TrackballControls( camera, renderer.domElement );

    useCamera( cam );
  }

  function reset() {
    // controls.reset();
    controls.focus( scene );
    navigateCamera( camera, cameras[0], 1500 );
  }
  signals.reset.add( reset );


  // events

  function getIntersects( event, object ) {
    var vector = new THREE.Vector3(
	  ( event.layerX / renderer.domElement.offsetWidth ) * 2 - 1,
	    - ( event.layerY / renderer.domElement.offsetHeight ) * 2 + 1,
	  0.5
    );
    projector.unprojectVector( vector, camera );
    ray.set( camera.position, vector.sub( camera.position ).normalize() );

    if ( object instanceof Array ) {
	  return ray.intersectObjects( object );
    }
    return ray.intersectObject( object );
  };

  function onMouseDown( event ) {
    event.preventDefault();
    onMouseDownPosition.set( event.layerX, event.layerY );
    if ( transformControls.hovered === false ) {
	  controls.enabled = true;
	  document.addEventListener( 'mouseup', onMouseUp, false );
    }
  };

  function onMouseUp( event ) {
    onMouseUpPosition.set( event.layerX, event.layerY );
    if ( onMouseDownPosition.distanceTo( onMouseUpPosition ) < 1 ) {
	  var intersects = getIntersects( event, objects );
      transformControls.detach();
	  if ( intersects.length > 0 ) {
	    var object = intersects[ 0 ].object;

        if ( object instanceof THREE.CameraHelper ) {
          transformControls.attach( object.camera );
        } else {
          transformControls.attach( object );
        }
	    // if ( object.userData.object !== undefined ) {
	    //   editor.select( object.userData.object );
	    // } else {
	    //   editor.select( object );
	    // }
	  } else {
	    // editor.select( camera );
	  }
	  render();
    }
    controls.enabled = false;
    document.removeEventListener( 'mouseup', onMouseUp );
  };

  function onDoubleClick( event ) {
    event.preventDefault();
    var intersects = getIntersects( event, objects );

    if ( intersects.length > 0 && intersects[ 0 ].object ) {
      var obj = intersects[ 0 ].object;
	  if ( obj instanceof THREE.CameraHelper ) {
        navigateCamera( camera, obj.camera, 2000 );
      }
    }
  }

  // Animate objA's state to objB's state, do not change objB
  function tweening( objA, objB, fields, duration, preFrame, postFrame, done, fail ) {
    duration || ( duration = 2000 );
    preFrame || ( preFrame = noop );
    postFrame || ( postFrame = noop );
    done || ( done = noop );
    fail || ( fail = noop );

    var fps = 60, dt = 1000/fps, numOfFrame = duration/dt
    var frameCount = 0;

    var deltas = fields.map( function( field ) {
      var tmpA = getTargetAndKey( objA, field );
      var A = tmpA[0], keyA = tmpA[1], valA = A[ keyA ];
      var tmpB = getTargetAndKey( objB, field );
      var B = tmpB[0], keyB = tmpB[1], valB = B[ keyB ];

      return {
        object: A,
        key: keyA,
        dest: valB,
        delta: (valB - valA)/numOfFrame
      };
    } );

    animate();

    function noop() {}
    function getTargetAndKey( obj, field ) {
      var arr = field.split( '.' ), target = obj;
      var key = arr.shift();
      while ( arr.length > 0 ) {
        target = target[ key ];
        key = arr.shift();
      }
      return [ target, key ];
    }

    function animate() {
      if ( frameCount < 0 ) {
        fail.call( objA );
      }

      frameCount = frameCount + 1;

      if ( frameCount < numOfFrame ) {
        preFrame.call( objA, frameCount );
        deltas.forEach( function( item ) {
          item.object[ item.key ] += item.delta;
        } );
        postFrame.call( objA, frameCount );
        setTimeout( animate, dt );
      } else {
        preFrame.call( objA, frameCount );
        deltas.forEach( function( item ) {
          item.object[ item.key ] = item.dest;
        } );
        postFrame.call( objA, frameCount );
        done.call( objA )
      }
    }
  }

  function navigateCamera( currentCamera, targetCamera, duration ) {
    duration || ( duration = 2000 );

    [ 'x', 'y', 'z' ].forEach( function( dir ) {
      var rad1 = currentCamera.rotation[dir];
      var rad2 = targetCamera.rotation[dir];
      var dt = rad2 -rad1;
      if ( dt > Math.PI ) {
        currentCamera.rotation[dir] += 2*Math.PI;
      } else if ( dt < -Math.PI ) {
        currentCamera.rotation[dir] -= 2*Math.PI;
      }
    } );

    var fields = [
      'position.x',
      'position.y',
      'position.z',
      'rotation.x',
      'rotation.y',
      'rotation.z',
    ]

    if ( targetCamera instanceof THREE.PerspectiveCamera ) {
      currentCamera.near = CAMERA_NEAR;
      currentCamera.far = CAMERA_FAR;
      currentCamera.aspect || ( currentCamera.aspect = window.innerWidth / window.innerHeight );
      currentCamera.fov || ( currentCamera.fov = 50 );

      fields.push( 'aspect' );
      fields.push( 'fov' );
    }

    var updateProj = THREE.PerspectiveCamera.prototype.updateProjectionMatrix;
    tweening(
      currentCamera, targetCamera, fields, duration,
      null,
      function() {
        updateProj.call( currentCamera );
        // render();
      },
      function() {
        transformControls.detach( currentCamera );
        // render();
      }
    );

  }

  function useCamera( cam ) {
    // controls.reset();

    var _cam = cam.clone();
    if ( cam instanceof THREE.PerspectiveCamera ) {
      _cam.far = 10000;
      _cam.updateProjectionMatrix();
    }

    camera.projectionMatrix.copy( _cam.projectionMatrix );
    camera.position.copy( _cam.position );
    camera.rotation.copy( _cam.rotation );
    camera.matrix.copy( _cam.matrix );
    camera.matrixWorld.copy( _cam.matrixWorld );
  }

  function buildScene() {
    var i;
    for ( i = 0; i < 20; ++i ) {
      var c = cube( 10, 10, 10 );
      c.position.set(
        Math.random() *100,
        Math.random() *100,
        Math.random() *100
      );
      scene.add( c );
      objects.push( c );
    }

    // transformControls.attach( c );

    grid = new THREE.GridHelper( 500, 25 );
    scene.add( grid );
  }

  function addCamera( pos, target, type ) {
    target || ( target = new THREE.Vector3( 0, 0, 0 ) );
    var w = window.innerWidth, h = window.innerHeight;
    var cam = new THREE.PerspectiveCamera( 50, w/h, 30, 30.1 );
    // var cam = new THREE.OrthographicCamera( -w/2, w/2, h/2, -h/2, 1, 1000 );
    cam.position.copy( pos );
    cam.lookAt( target );
    cameras.push( cam );
    scene.add( cam );

    var helper = new THREE.CameraHelper( cam );
    objects.push( helper );
    cam.helper = helper;
    scene.add( helper );
  }

  function showCameras( show ) {
    if ( show !== false ) {
      show = true;
    } else {
      show = false;
    }

    cameras.forEach( function( cam ) {
      if ( cam.helper ) {
        cam.helper.visible = show;
      }
    } );

    render();
  }

  function addSomeCamera() {
    var poses = [ [ 100, 100, -100 ], [ -100, 300, 0], [ 0, 0, -200] ];
    poses
      .map( function( arr ) {
        return ( new THREE.Vector3() ).fromArray( arr );
      } )
      .forEach( function( pos ) {
        addCamera( pos );
      } );
  }

  function initAR() {
    ar.init( function( ar ) {


    } );
  }

  function cube( w, h, t ) {
    var m = new THREE.Mesh(
      new THREE.CubeGeometry( w || 40, h || 40, t || 40 )
    );
    m.material.wireframe = false;
    return m;
  }

  return this;

}
