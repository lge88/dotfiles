# -*- mode: snippet -*-
# name: function prog
# key: funprog
# --
function prog() {

  var stack =  Array.prototype.slice.call(arguments);
  var _compiled;

  (typeof stack[0] === "string") && (p.route = stack.shift() );
  (stack.length === 1) && Array.isArray(stack[0]) && (stack = stack[0]);

  function p() {
    p.dirty && (_compiled = p.compile( p.stack) ) && (p.dirty = false);
    return _compiled.apply(this, arguments);
  }

  p.dirty = true;
  p.clone = clone;
  p.stack = stack;
  p.noop = noop;
  p.compile = compile;
  compile.comparator = byOrder;

  function compile(stack) {
    return stack
      .slice()
      .filter(function( f) { return f !== p.noop; } )
      .map(function( f) {
        isNaN(f.order) && (f.order = 0);
        return f;
      } )
      .sort(compile.comparator)
      .reduce(function( sofar, f) {
        return function(x) { return f(sofar(x) ); };
      }, p.noop );
  };

  function noop(x) { return x; }
  function byOrder(a, b) { return a.order - b.order; };
  function clone() { return prog(p.route, p.stack); }

  return p;
};

// $0
var p = prog("test", [function( x) { return x+1; },
  function(x) { return x*x; },
  function(x) { return 2*x; }] );
console.log(p);
console.log(p.route);
console.log(p(20) );
